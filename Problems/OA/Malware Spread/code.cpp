/***************************************************************************************************
 * author : Jie Chen (3rd Year CS)
 * school : Rochester Institute of Technology
 * created: 03.04.2024 20:15:03
****************************************************************************************************/
#include <bits/stdc++.h>

using namespace std;

#ifdef BROKEN_CODE
#include <bits/debug.h>
#else
#define dbg(...) 10082002
#define dbp(...) "Gimme Internship"
#endif

using i64 = long long;

constexpr int INF = 1e9 + 5;

int solve(int n, int m, const vector<int>& node1, const vector<int>& node2, const vector<int>& bad) {
    vector<vector<int>> adj(n);
    for (int i = 0; i < m; i++) {
        int u = node1[i], v = node2[i];
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<int> infected;
    for (int i = 0; i < n; i++) {
        if (bad[i]) {
            infected.push_back(i);
        }
    }

    vector<int> vis(n);
    pair<int, int> ans = make_pair(INF, INF);
    for (int i = 0; i < n; i++) {
        int good = n - 1;
        function<void(int)> dfs = [&](int u) -> void {
            vis[u] = i;
            good--;
            for (int v : adj[u]) {
                if (vis[v] == i) {
                    continue;
                }
                dfs(v);
            }
        };
        vis[i] = i;
        for (int infect : infected) {
            if (!vis[infect]) {
                dfs(infect);
            }
        }
        pair<int, int> res = make_pair(good, i);
        ans = min(ans, res);
    }
    return ans.second;
}

int main() {
    int n = 9, m = 5;
    vector<int> node1 = {1, 2, 4, 6, 7};
    vector<int> node2 = {2, 3, 5, 7, 8};
    vector<int> condition = {0, 0, 1, 0, 1, 0, 0, 0, 0};
    cout << solve(n, m, node1, node2, condition) << "\n";
}   

// ~ Just Jie